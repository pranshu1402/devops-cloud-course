name: CI/CD Pipeline

on:
  push:
    branches: [ main, staging, develop ]
  pull_request:
    branches: [ main, staging ]
  release:
    types: [ published ]

env:
  PYTHON_VERSION: '3.10'
  APP_DIR: expense-tracker-main

jobs:
  test:
    name: Test Application
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python ${{ env.PYTHON_VERSION }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
          
    - name: Install dependencies
      working-directory: ${{ env.APP_DIR }}
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-cov flake8 bandit
        
    - name: Run linting
      working-directory: ${{ env.APP_DIR }}
      run: |
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
        
    - name: Run security checks
      working-directory: ${{ env.APP_DIR }}
      run: |
        bandit -r . -f json -o bandit-report.json || true
        
    - name: Run tests
      working-directory: ${{ env.APP_DIR }}
      env:
        DB_URI: sqlite:///:memory:
        SECRET_KEY: test-secret-key
      run: |
        python -m pytest tests/ -v --cov=. --cov-report=xml --cov-report=html
        
    - name: Upload coverage reports
      uses: codecov/codecov-action@v3
      with:
        file: ${{ env.APP_DIR }}/coverage.xml
        flags: unittests
        name: codecov-umbrella
        
    - name: Upload test results
      uses: actions/upload-artifact@v3
      with:
        name: test-results
        path: |
          ${{ env.APP_DIR }}/htmlcov/
          ${{ env.APP_DIR }}/bandit-report.json
        retention-days: 30

  build:
    name: Build Application
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python ${{ env.PYTHON_VERSION }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Install dependencies
      working-directory: ${{ env.APP_DIR }}
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        
    - name: Build application
      working-directory: ${{ env.APP_DIR }}
      run: |
        python -m py_compile main.py
        python -m py_compile app/*.py
        echo "Build completed successfully!"
        
    - name: Create build artifact
      run: |
        tar -czf expense-tracker-build.tar.gz ${{ env.APP_DIR }}/
        
    - name: Upload build artifact
      uses: actions/upload-artifact@v3
      with:
        name: build-artifact
        path: expense-tracker-build.tar.gz
        retention-days: 30

  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: test
    if: github.ref == 'refs/heads/staging'
    environment: staging
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python ${{ env.PYTHON_VERSION }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Install dependencies
      working-directory: ${{ env.APP_DIR }}
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        
    - name: Deploy to staging server
      uses: appleboy/ssh-action@v1.0.3
      with:
        host: ${{ secrets.STAGING_HOST }}
        username: ${{ secrets.STAGING_USERNAME }}
        key: ${{ secrets.STAGING_SSH_KEY }}
        port: ${{ secrets.STAGING_PORT }}
        script: |
          # Create deployment directory
          sudo mkdir -p /opt/expense-tracker-staging
          
          # Stop existing service
          sudo systemctl stop expense-tracker-staging || true
          
          # Clean previous deployment
          sudo rm -rf /opt/expense-tracker-staging/*
          
          # Copy new files
          sudo cp -r expense-tracker-main/* /opt/expense-tracker-staging/
          
          # Set up virtual environment
          cd /opt/expense-tracker-staging
          python3 -m venv venv
          source venv/bin/activate
          pip install -r requirements.txt
          
          # Set environment variables
          echo "export DB_URI=${{ secrets.STAGING_DB_URI }}" | sudo tee .env
          echo "export SECRET_KEY=${{ secrets.STAGING_SECRET_KEY }}" | sudo tee -a .env
          
          # Set permissions
          sudo chown -R jenkins:jenkins /opt/expense-tracker-staging
          
          # Start service
          sudo systemctl daemon-reload
          sudo systemctl enable expense-tracker-staging
          sudo systemctl start expense-tracker-staging
          
          # Wait for service to start
          sleep 10
          
          # Health check
          if curl -f http://localhost:5000/health; then
            echo "Deployment successful!"
          else
            echo "Deployment failed!"
            exit 1
          fi
          
    - name: Notify deployment status
      if: always()
      uses: 8398a7/action-slack@v3
      with:
        status: ${{ job.status }}
        channel: '#deployments'
        webhook_url: ${{ secrets.SLACK_WEBHOOK_URL }}
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [test, build]
    if: github.event_name == 'release' && github.event.action == 'published'
    environment: production
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python ${{ env.PYTHON_VERSION }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Install dependencies
      working-directory: ${{ env.APP_DIR }}
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        
    - name: Deploy to production server
      uses: appleboy/ssh-action@v1.0.3
      with:
        host: ${{ secrets.PRODUCTION_HOST }}
        username: ${{ secrets.PRODUCTION_USERNAME }}
        key: ${{ secrets.PRODUCTION_SSH_KEY }}
        port: ${{ secrets.PRODUCTION_PORT }}
        script: |
          # Create backup of current deployment
          sudo cp -r /opt/expense-tracker-production /opt/expense-tracker-backup-$(date +%Y%m%d-%H%M%S) || true
          
          # Stop existing service
          sudo systemctl stop expense-tracker-production || true
          
          # Create deployment directory
          sudo mkdir -p /opt/expense-tracker-production
          
          # Clean previous deployment
          sudo rm -rf /opt/expense-tracker-production/*
          
          # Copy new files
          sudo cp -r expense-tracker-main/* /opt/expense-tracker-production/
          
          # Set up virtual environment
          cd /opt/expense-tracker-production
          python3 -m venv venv
          source venv/bin/activate
          pip install -r requirements.txt
          
          # Set environment variables
          echo "export DB_URI=${{ secrets.PRODUCTION_DB_URI }}" | sudo tee .env
          echo "export SECRET_KEY=${{ secrets.PRODUCTION_SECRET_KEY }}" | sudo tee -a .env
          
          # Set permissions
          sudo chown -R jenkins:jenkins /opt/expense-tracker-production
          
          # Start service
          sudo systemctl daemon-reload
          sudo systemctl enable expense-tracker-production
          sudo systemctl start expense-tracker-production
          
          # Wait for service to start
          sleep 15
          
          # Health check
          if curl -f http://localhost:5000/health; then
            echo "Production deployment successful!"
            # Remove old backup if deployment successful
            sudo rm -rf /opt/expense-tracker-backup-*
          else
            echo "Production deployment failed! Rolling back..."
            # Rollback to previous version
            sudo systemctl stop expense-tracker-production
            sudo rm -rf /opt/expense-tracker-production
            sudo cp -r /opt/expense-tracker-backup-* /opt/expense-tracker-production
            sudo systemctl start expense-tracker-production
            exit 1
          fi
          
    - name: Notify production deployment
      if: always()
      uses: 8398a7/action-slack@v3
      with:
        status: ${{ job.status }}
        channel: '#production-deployments'
        webhook_url: ${{ secrets.SLACK_WEBHOOK_URL }}
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

  docker-build:
    name: Build Docker Image
    runs-on: ubuntu-latest
    needs: test
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Login to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}
        
    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: ./${{ env.APP_DIR }}
        push: true
        tags: |
          ${{ secrets.DOCKER_USERNAME }}/expense-tracker:latest
          ${{ secrets.DOCKER_USERNAME }}/expense-tracker:${{ github.sha }}
        cache-from: type=gha
        cache-to: type=gha,mode=max 